import { Observable } from '../Observable';
import { asap as asapScheduler } from '../scheduler/asap';
import { isScheduler } from '../util/isScheduler';
class SubscribeOnObservable extends Observable {
    constructor(source, delayTime = 0, scheduler = asapScheduler) {
        super();
        this.source = source;
        this.delayTime = delayTime;
        this.scheduler = scheduler;
        if (delayTime < 0) {
            this.delayTime = 0;
        }
        if (!isScheduler(scheduler)) {
            this.scheduler = asapScheduler;
        }
    }
    static dispatch(arg) {
        const { source, subscriber } = arg;
        return this.add(source.subscribe(subscriber));
    }
    _subscribe(subscriber) {
        const delay = this.delayTime;
        const source = this.source;
        const scheduler = this.scheduler;
        return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {
            source,
            subscriber,
        });
    }
}
export function subscribeOn(scheduler, delay = 0) {
    return function subscribeOnOperatorFunction(source) {
        return source.lift(new SubscribeOnOperator(scheduler, delay));
    };
}
class SubscribeOnOperator {
    constructor(scheduler, delay) {
        this.scheduler = scheduler;
        this.delay = delay;
    }
    call(subscriber, source) {
        return new SubscribeOnObservable(source, this.delay, this.scheduler).subscribe(subscriber);
    }
}
//# sourceMappingURL=subscribeOn.js.map