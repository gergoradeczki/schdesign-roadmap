import { Subscriber } from '../Subscriber';
import { observeNotification, COMPLETE_NOTIFICATION, nextNotification, errorNotification } from '../Notification';
export function observeOn(scheduler, delay = 0) {
    return function observeOnOperatorFunction(source) {
        return source.lift(new ObserveOnOperator(scheduler, delay));
    };
}
class ObserveOnOperator {
    constructor(scheduler, delay = 0) {
        this.scheduler = scheduler;
        this.delay = delay;
    }
    call(subscriber, source) {
        return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));
    }
}
class ObserveOnSubscriber extends Subscriber {
    constructor(destination, scheduler, delay = 0) {
        super(destination);
        this.scheduler = scheduler;
        this.delay = delay;
    }
    static dispatch(arg) {
        const { notification, destination } = arg;
        observeNotification(notification, destination);
        this.unsubscribe();
    }
    scheduleMessage(notification) {
        const destination = this.destination;
        destination.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, {
            notification,
            destination,
        }));
    }
    _next(value) {
        this.scheduleMessage(nextNotification(value));
    }
    _error(error) {
        this.scheduleMessage(errorNotification(error));
        this.unsubscribe();
    }
    _complete() {
        this.scheduleMessage(COMPLETE_NOTIFICATION);
        this.unsubscribe();
    }
}
//# sourceMappingURL=observeOn.js.map